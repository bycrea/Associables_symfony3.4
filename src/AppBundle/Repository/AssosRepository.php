<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Donation;

/**
 * AssosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AssosRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $id //Id de la catégorie
     * @return array
     *
     * Retourne les associations liées à une catégorie
     */
    public function getByCategory($id)
    {
        $queryBuilder = $this->createQueryBuilder('assos');

        $queryBuilder
            ->leftJoin('assos.categories', 'category')
            ->where('category.id = :id')
            ->setParameter('id', $id);

        return $queryBuilder->getQuery()->getResult();
    }


    /**
     * @param $user //utilisateur connecté
     * @return array
     *
     * Retourne les associtations auquelles un utilisateur à donné
     * paymentStatus = en attente de transfert OU transféré
     */
    public function getByUserDonation($user)
    {
        $queryBuilder = $this->createQueryBuilder('assos');

        $queryBuilder
            ->leftJoin('assos.donations', 'don')
            ->leftJoin('don.user', 'user')

            ->where('don.user = :user')
            ->setParameter('user', $user)

            ->andWhere('don.paymentStatus IN (:status)')
            ->setParameter('status', [Donation::PAY_IN_TRANSFER, Donation::PAY_PROCESSED])

            ->orderBy('don.createdAt', 'DESC');

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param $association //associtaion testé
     * @param $user //utilisateur connecté (ou null)
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * Retourne les montant total des dons pour une association
     * paymentStatus = en attente de transfert OU transféré
     * NB: peut être trié pour UN utilisateur OU TOUS utilisateur confondus
     */
    public function getGivenAmount($association, $user = null)
    {
        $queryBuilder = $this->createQueryBuilder('assos');

        $queryBuilder
            ->select('SUM(don.amount)')
            ->leftJoin('assos.donations', 'don')

            ->where('don.assos = :asso')
            ->setParameter('asso', $association);

        // Si on ne précise pas l'utilisateur, le montant sera calculé sur tous les dons confondus
        if(!empty($user))
        {
            $queryBuilder
                ->andWhere('don.user = :user')
                ->setParameter('user', $user);
        }

        $queryBuilder
            ->andWhere('don.paymentStatus IN (:status)')
            ->setParameter('status', [Donation::PAY_IN_TRANSFER, Donation::PAY_PROCESSED]);


        return $queryBuilder->getQuery()->getSingleScalarResult();
    }



    public function findBySearchBar($search)
    {
        $queryBuilder = $this->createQueryBuilder('assos');

        $queryBuilder
            ->where('assos.name LIKE :search')
            ->setParameter('search', $search.'%');

        return $queryBuilder->getQuery()->getResult();
    }


    /**
     * @param $limit //max results
     * @return array
     *
     * Retourne le nombre $limit d'assciations trié du don le plus récent au plus vieux.
     */
    public function findMostRecent($limit)
    {
        $queryBuilder = $this->createQueryBuilder('assos');

        $queryBuilder
            ->leftJoin('assos.donations', 'don')
            ->orderBy('don.createdAt', 'DESC')
            ->setMaxResults($limit);

        return $queryBuilder->getQuery()->getResult();
    }
}
